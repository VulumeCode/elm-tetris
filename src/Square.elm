module Square exposing (Square(..))

import Tetromino exposing (Tetromino)


type Square
    = Square Internal


type alias Internal =
    { tetromino : Tetromino, current : Bool }



-- type alias Internal =
--     { x : Int, y : Int, color : String }
-- moveLeft : List Square -> List Square
-- moveLeft squares =
--     if listIncludes (\{ x } -> x == 0) squares then
--         squares
--     else
--         listMap (\square -> { square | x = square.x + 1 }) squares
-- moveRight : List Square -> List Square
-- moveRight squares =
--     if listIncludes (\{ x } -> x == 0) squares then
--         squares
--     else
--         listMap (\square -> { square | x = square.x + 1 }) squares
-- map : (Internal -> Internal) -> Square -> Square
-- map f (Square square) =
--     Square (f square)
-- listMap : (Internal -> Internal) -> List Square -> List Square
-- listMap f squares =
--     List.map (map f) squares
-- listIncludes : (Internal -> Bool) -> List Square -> Bool
-- listIncludes condition squares =
--     List.foldl (\(Square square) b -> condition square) False squares
-- listFromTetromino : Tetromino -> List Square
-- listFromTetromino tetromino =
--     case tetromino of
--         I ->
--             [ { location = ( 3, 0 ), block = I }
--             , { location = ( 4, 0 ), block = I }
--             , { location = ( 5, 0 ), block = I }
--             , { location = ( 6, 0 ), block = I }
--             ]
--         O ->
--             [ { location = ( 4, 0 ), block = O }
--             , { location = ( 5, 0 ), block = O }
--             , { location = ( 4, 1 ), block = O }
--             , { location = ( 5, 1 ), block = O }
--             ]
--         T ->
--             [ { location = ( 4, 0 ), block = T }
--             , { location = ( 5, 0 ), block = T }
--             , { location = ( 6, 0 ), block = T }
--             , { location = ( 5, 1 ), block = T }
--             ]
--         S ->
--             [ { location = ( 5, 0 ), block = S }
--             , { location = ( 6, 0 ), block = S }
--             , { location = ( 4, 1 ), block = S }
--             , { location = ( 5, 1 ), block = S }
--             ]
--         Z ->
--             [ { location = ( 4, 0 ), block = Z }
--             , { location = ( 5, 0 ), block = Z }
--             , { location = ( 5, 1 ), block = Z }
--             , { location = ( 6, 1 ), block = Z }
--             ]
--         J ->
--             [ { location = ( 3, 0 ), block = J }
--             , { location = ( 4, 0 ), block = J }
--             , { location = ( 5, 0 ), block = J }
--             , { location = ( 5, 1 ), block = J }
--             ]
--         L ->
--             [ { location = ( 5, 0 ), block = L }
--             , { location = ( 6, 0 ), block = L }
--             , { location = ( 7, 0 ), block = L }
--             , { location = ( 5, 1 ), block = L }
--             ]
-- type Tetromino
--     = I
--     | O
--     | T
--     | S
--     | Z
--     | J
--     | L
-- color : Tetromino -> String
-- color block =
--     case block of
--         I ->
--             "text-teal-400"
--         O ->
--             "text-yellow-400"
--         T ->
--             "text-pink-400"
--         S ->
--             "text-green-400"
--         Z ->
--             "text-red-400"
--         J ->
--             "text-blue-400"
--         L ->
--             "text-orange-400"
-- add : Tetromino -> List { location : ( Int, Int ), block : Tetromino }
-- add tetromino =
--     case tetromino of
--         I ->
--             [ { location = ( 3, 0 ), block = I }
--             , { location = ( 4, 0 ), block = I }
--             , { location = ( 5, 0 ), block = I }
--             , { location = ( 6, 0 ), block = I }
--             ]
--         O ->
--             [ { location = ( 4, 0 ), block = O }
--             , { location = ( 5, 0 ), block = O }
--             , { location = ( 4, 1 ), block = O }
--             , { location = ( 5, 1 ), block = O }
--             ]
--         T ->
--             [ { location = ( 4, 0 ), block = T }
--             , { location = ( 5, 0 ), block = T }
--             , { location = ( 6, 0 ), block = T }
--             , { location = ( 5, 1 ), block = T }
--             ]
--         S ->
--             [ { location = ( 5, 0 ), block = S }
--             , { location = ( 6, 0 ), block = S }
--             , { location = ( 4, 1 ), block = S }
--             , { location = ( 5, 1 ), block = S }
--             ]
--         Z ->
--             [ { location = ( 4, 0 ), block = Z }
--             , { location = ( 5, 0 ), block = Z }
--             , { location = ( 5, 1 ), block = Z }
--             , { location = ( 6, 1 ), block = Z }
--             ]
--         J ->
--             [ { location = ( 3, 0 ), block = J }
--             , { location = ( 4, 0 ), block = J }
--             , { location = ( 5, 0 ), block = J }
--             , { location = ( 5, 1 ), block = J }
--             ]
--         L ->
--             [ { location = ( 5, 0 ), block = L }
--             , { location = ( 6, 0 ), block = L }
--             , { location = ( 7, 0 ), block = L }
--             , { location = ( 5, 1 ), block = L }
--             ]
